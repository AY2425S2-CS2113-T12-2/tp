@startuml
participant InputHandler as ":InputHandler"
participant Storage as ":Storage"
participant File as ":File"
participant Formatter as ":Formatter"
participant Scanner as ":Scanner"
participant loan as ":Loan"


InputHandler -> Storage: loadInventory()
activate Storage

' Create a new empty loanList
create loanList as ":loanList"
Storage -> loanList: new ArrayList<loan>()
activate loanList
loanList --> Storage: loanList
deactivate loanList

' Create File object for LOAN_LIST_FILE_PATH
Create File
Storage -> File: new File(LOAN_LIST_FILE_PATH)
activate File
File --> Storage: file
deactivate File

opt !file.exists()
    Storage -> Formatter: printBorderedMessage("No saved loans found...")
    activate Formatter

    Formatter --> Storage
    deactivate Formatter
    
    Storage --> InputHandler: empty loanList
    end
    ' Open the file using a Scanner
    create Scanner
    Storage -> Scanner: new Scanner(file)
    activate Scanner
    Scanner --> Storage: scanner
    deactivate Scanner

    loop scanner.hasNextLine()
        Storage -> Scanner: nextLine()
        activate Scanner

        Scanner --> Storage: line
        deactivate Scanner

        Storage -> Storage: parseloanFromString(line)
        activate Storage
        alt line has invalid format
            note over File
            returns null if the line has invalid format
            end note
        else else
            create loan
            Storage -> loan: create loan with arguments provided in line
            activate loan
            loan --> Storage: loan
            deactivate loan
        end
        Storage --> Storage: loan
        deactivate Storage

        opt loan != null
            ' Check for duplicate loan
            Storage -> loanList: Check for duplicate loan objects using stream
            activate loanList
            loanList --> Storage: isDuplicate
            deactivate loanList
            alt isDuplicate
                ' loan already exists, skip adding it
                Storage -> Formatter: printBorderedMessage("Duplicate loan found...")
                activate Formatter
                Formatter --> Storage
                deactivate Formatter
                
            else else
                ' Add loan to loanList
                Storage -> loanList: add(loan)
                activate loanList
                loanList --> Storage
                deactivate loanList
            end 
        end
    end

    

    Storage -> Scanner: close()
    activate Scanner
    Scanner --> Storage
    deactivate Scanner
    destroy Scanner
    ' Print message with number of loans loaded
    Storage -> Formatter: printBorderedMessage("Loaded...")
    activate Formatter
    Formatter --> Storage
    deactivate Formatter
    

    Storage --> InputHandler: loanList
    destroy File
    deactivate Storage

deactivate Storage
@enduml
