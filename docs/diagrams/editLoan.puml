@startuml
actor User
participant InputHandler as ":InputHandler"
participant InputParser as ":InputParser"
participant BookList as ":BookList"
participant LoanList as ":LoanList"
participant Loan as ":Loan"
participant Formatter as ":Formatter"
participant Storage as ":Storage"

User -> InputHandler: "edit-loan BOOK_TITLE \n n/BORROWER_NAME d/RETURN_DATE \n p/PHONE_NUMBER e/EMAIL"
activate InputHandler

InputHandler -> InputParser: extractCommandArgs(userInputLine)
activate InputParser

InputParser --> InputHandler: commandArgs[]
deactivate InputParser

alt commandArgs[0] == edit-loan
    InputHandler -> InputHandler : editLoan()
    activate InputHandler

    alt commandArgs.length >= 2
        InputHandler -> InputParser: extractEditLoanArgs(commandArgs[1])
        activate InputParser

        InputParser --> InputHandler: parsedArgs
        deactivate InputParser

        InputHandler -> LoanList: findLoanByIndex(index)
        activate LoanList

        LoanList --> InputHandler: Loan or null
        deactivate LoanList

        InputHandler -> Loan: getTitle() 
        activate Loan

        Loan --> InputHandler: title
        deactivate Loan

        InputHandler -> BookList: findBookByTitle(title)
        activate BookList

        BookList --> InputHandler: Book or null
        deactivate BookList

        alt Book == null
            InputHandler -> Formatter: printBorderedMessage("Book is not found in inventory: {BOOK_TITLE}")
            activate Formatter
            Formatter --> InputHandler
            deactivate Formatter
        
        else Book.isonLoan()
            InputHandler -> Formatter: printBorderedMessage("The book {BOOK_TITLE} is not currently out on loan.")
            activate Formatter
            Formatter --> InputHandler
            deactivate Formatter
        
        else else
            InputHandler -> InputHandler : setRelaventFields(...)
            activate InputHandler
            InputHandler --> InputHandler
            deactivate InputHandler       

            InputHandler -> Formatter: printBorderedMessage("Loan Updated: {Loan}")
            activate Formatter
            Formatter --> InputHandler
            deactivate Formatter

            InputHandler -> Storage: saveLoans(bookList)
            activate Storage
            Storage --> InputHandler
            deactivate Storage

        end

    else else
        InputHandler -> Formatter: printBorderedMessage("Invalid format for edit-loan.")
        activate Formatter
        Formatter --> InputHandler
        deactivate Formatter
    end

InputHandler --> InputHandler
deactivate InputHandler

else else
    note over InputHandler : other commands
end


InputHandler --> User
deactivate InputHandler
@enduml