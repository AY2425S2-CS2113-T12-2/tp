@startuml
actor User
participant InputHandler as ":InputHandler"
participant InputParser as ":InputParser"
participant BookList as ":BookList"
participant LoanList as ":LoanList"
participant Loan as ":Loan"
participant Formatter as ":Formatter"
participant Storage as ":Storage"

User -> InputHandler: userInputLine
activate InputHandler

InputHandler -> InputParser: extractCommandArgs(userInputLine)
activate InputParser

InputParser --> InputHandler: commandArgs[]
deactivate InputParser

alt commandArgs[0] == edit-loan
    InputHandler -> InputHandler : editLoan()
    activate InputHandler

    opt commandArgs.length < 2
        note right
        rest of sequence is cancelled in error cases denoted in opt frames
        end note
        InputHandler -> Formatter: Print exception message
        activate Formatter
        Formatter --> InputHandler
        deactivate Formatter
    end
    InputHandler -> InputParser: extractEditLoanArgs(commandArgs[1])
    activate InputParser

    InputParser --> InputHandler: parsedArgs
    deactivate InputParser

    InputHandler -> LoanList: findLoanByIndex(index)
    activate LoanList

    LoanList --> InputHandler: Loan or null
    deactivate LoanList
    opt Loan == null
    InputHandler -> Formatter: Print exception message
    activate Formatter
    Formatter --> InputHandler
    deactivate Formatter
    end
    InputHandler -> Loan: getTitle()
    activate Loan

    Loan --> InputHandler: title
    deactivate Loan

    InputHandler -> BookList: findBookByTitle(title)
    activate BookList

    BookList --> InputHandler: Book
    deactivate BookList

        alt Book == null
            InputHandler -> Formatter: printBorderedMessage("Book is not found in inventory: {BOOK_TITLE}")
            activate Formatter
            Formatter --> InputHandler
            deactivate Formatter
        
        else !book.isOnLoan()
            InputHandler -> Formatter: printBorderedMessage("The book {BOOK_TITLE} is not currently out on loan.")
            activate Formatter
            Formatter --> InputHandler
            deactivate Formatter
        
        else else
            InputHandler -> InputHandler : setRelevantFields(...)
            activate InputHandler
            InputHandler --> InputHandler
            deactivate InputHandler       

            InputHandler -> Formatter: printBorderedMessage("Loan Updated: {Loan}")
            activate Formatter
            Formatter --> InputHandler
            deactivate Formatter

            InputHandler -> Storage: saveLoans(bookList)
            activate Storage
            Storage --> InputHandler
            deactivate Storage

        end


InputHandler --> InputHandler
deactivate InputHandler

else else
    note over InputHandler : other commands
end


InputHandler --> User
deactivate InputHandler
@enduml