@startuml
participant InputHandler as ":InputHandler"
participant Storage as ":Storage"
participant File as ":File"
participant Formatter as ":Formatter"
participant Scanner as ":Scanner"


InputHandler -> Storage: loadInventory()
activate Storage

' Create a new empty bookList
create BookList as ":BookList"
Storage -> BookList: new ArrayList<Book>()
activate BookList
BookList --> Storage: bookList
deactivate BookList

' Create File object for INVENTORY_FILE_PATH
Create File
Storage -> File: new File(INVENTORY_FILE_PATH)
activate File
File --> Storage: file
deactivate File

opt !file.exists()
    Storage -> Formatter: printBorderedMessage("No saved inventory found...")
    activate Formatter

    Formatter --> Storage
    deactivate Formatter
    
    Storage --> InputHandler: empty bookList
    end
    ' Open the file using a Scanner
    create Scanner
    Storage -> Scanner: new Scanner(file)
    activate Scanner
    Scanner --> Storage: scanner
    deactivate Scanner

    loop scanner.hasNextLine()
        Storage -> Scanner: nextLine()
        activate Scanner

        Scanner --> Storage: line
        deactivate Scanner

        Storage -> Storage: parseBookFromString(line)
        activate Storage
        alt line has invalid format
            note over File
            returns null if the line has invalid format
            end note
        else 
            create Book
            Storage -> Book: create book with arguments provided in line
            activate Book
            Book --> Storage: book
            deactivate Book
        end
        Storage --> Storage: book
        deactivate Storage

        alt book != null
            ' Check for duplicate book
            Storage -> BookList: Check for duplicate book objects using stream
            activate BookList
            BookList --> Storage: isDuplicate
            deactivate BookList
            alt isDuplicate
                ' Book already exists, skip adding it
                Storage -> Formatter: printBorderedMessage("Duplicate book found...")
                activate Formatter
                Formatter --> Storage
                deactivate Formatter
                
            else
                ' Add book to bookList
                Storage -> BookList: add(book)
                activate BookList
                BookList --> Storage
                deactivate BookList
            end 
        end
    end

    

    Storage -> Scanner: close()
    activate Scanner
    Scanner --> Storage
    deactivate Scanner
    destroy Scanner
    ' Print message with number of books loaded
    Storage -> Formatter: printBorderedMessage("Loaded...")
    activate Formatter
    Formatter --> Storage
    deactivate Formatter
    

    Storage --> InputHandler: bookList
    destroy File
    deactivate Storage

deactivate Storage
@enduml
