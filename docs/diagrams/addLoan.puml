@startuml
actor User
participant InputHandler as ":InputHandler"
participant InputParser as ":InputParser"
participant BookList as ":BookList"
participant LoanList as ":LoanList"
participant Formatter as ":Formatter"
participant Storage as ":Storage"
participant Book as ":Book"

User -> InputHandler: userInputLine
activate InputHandler

InputHandler -> InputParser: extractCommandArgs(userInputLine)
activate InputParser

InputParser --> InputHandler: commandArgs[]
deactivate InputParser

alt commandArgs[0] == add-loan
    InputHandler -> InputHandler : addLoan()
    activate InputHandler

opt commandArgs.length < 2
    note right
    rest of sequence is cancelled in error cases denoted in opt frames
    end note
    InputHandler -> Formatter: Print exception message
    activate Formatter
    Formatter --> InputHandler
    deactivate Formatter
end
    InputHandler -> InputParser: extractAddLoanArgs(commandArgs[1])
    activate InputParser

    InputParser --> InputHandler: parsedArgs
    deactivate InputParser

    InputHandler -> BookList: findBookByTitle(BOOK_TITLE)
    activate BookList

    BookList --> InputHandler: Book
    deactivate BookList

    opt Book == null
        InputHandler -> Formatter: Print exception message
        activate Formatter

        Formatter --> InputHandler
        deactivate Formatter
    end
        InputHandler -> Book: getOnLoan()
        activate Book

        Book --> InputHandler
        deactivate Book

        opt loanedBook.getOnLoan() == true
            InputHandler -> Formatter: Print exception message
            activate Formatter

            Formatter --> InputHandler
            deactivate Formatter
        end

        InputHandler -> Loan ** : Loan(parsedArgs)
        activate Loan

        Loan --> InputHandler : newLoan
        deactivate Loan


        InputHandler -> LoanList: addLoan(newLoan)
        activate LoanList
        LoanList --> InputHandler: Loan added
        deactivate LoanList

        InputHandler -> Book: setOnLoan(true)
        activate Book

        Book --> InputHandler
        deactivate Book

        InputHandler -> Formatter: printBorderedMessage("Loan added successfully for book: {BOOK_TITLE}")
        activate Formatter

        Formatter --> InputHandler
        deactivate Formatter

        InputHandler -> Storage: saveLoans(loanList)
        activate Storage

        Storage --> InputHandler
        deactivate Storage

        InputHandler -> Storage: saveInventory(bookList)
        activate Storage

        Storage --> InputHandler
        deactivate Storage

InputHandler --> InputHandler
deactivate InputHandler

else else
    note over InputHandler : other commands
end

InputHandler --> User
deactivate InputHandler
@enduml