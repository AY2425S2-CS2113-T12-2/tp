@startuml
autoactivate on

actor User
participant InputHandler as ":InputHandler"
participant BookList as ":BookList"
participant InputParser as ":InputParser"
participant Storage as ":Storage"
participant Formatter as ":Formatter"
participant Book as ":Book"

User -> InputHandler : update-note(BOOK_TITLE, note/NOTE)
InputHandler -> InputParser : extractCommandArgs(User input)
return commandArgs

alt commandArgs[0] == update-note
    InputHandler -> InputHandler : updateNote()
    opt commandArgs.length < 2
        note right
        rest of sequence is cancelled in error cases denoted in opt frames
        end note
        InputHandler -> Formatter : printBorderedMessage(Invalid Format)
        return
    end

    InputHandler -> InputParser : extractUpdateNoteArgs(commandArgs[1])
    return noteArgs

    InputHandler -> BookList : findBookByTitle(bookTitle)
    return book

    opt book == null 
        InputHandler -> Formatter : printBorderedMessage(Book Not Found)
        return 
    end

    opt book has no note
        InputHandler -> Formatter : printBorderedmessage(Book has no note)
        return
    end

    InputHandler -> Book : setNote(note)
    return

    InputHandler -> Formatter : printBorderedMessage(Note updated)
    return 

    InputHandler -> Storage : saveInventory(bookList)
    return

else else
note over InputHandler : other commands

end

return
return

@enduml